import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Header from '../../components/user/Header';
import Footer from '../../components/user/Footer';
import { bloodRequestAPI } from '../../services/api';
import { message, Modal } from 'antd';
import './EmergencyRequestDetail.css';
import { donorAPI } from '../../services/api';

const { confirm } = Modal;

export default function EmergencyRequestDetail() {
  const { requestId } = useParams();
  const navigate = useNavigate();
  const [request, setRequest] = useState(null);
  const [loading, setLoading] = useState(true);
  const [responding, setResponding] = useState(false);
  const [selectedResponse, setSelectedResponse] = useState(null);

  useEffect(() => {
    const fetchRequestDetail = async () => {
      try {
        setLoading(true);
        const data = await bloodRequestAPI.getRequestById(requestId);
        setRequest(data);
      } catch (error) {
        console.error('Error fetching request detail:', error);
        message.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin y√™u c·∫ßu m√°u');
      } finally {
        setLoading(false);
      }
    };
    fetchRequestDetail();
  }, [requestId]);

  const handleResponse = (accepted) => {
    const action = accepted ? 'x√°c nh·∫≠n' : 't·ª´ ch·ªëi';
    const status = accepted ? 'contact_successful' : 'rejected';
    confirm({
      title: `X√°c nh·∫≠n ${action}`,
      content: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ${action} y√™u c·∫ßu hi·∫øn m√°u kh·∫©n c·∫•p n√†y kh√¥ng?`,
      okText: 'X√°c nh·∫≠n',
      cancelText: 'H·ªßy',
      onOk: async () => {
        setResponding(true);
        try {
          await donorAPI.updateMatchingBloodStatus(requestId, status);
          message.success(`ƒê√£ ${action} y√™u c·∫ßu hi·∫øn m√°u kh·∫©n c·∫•p`);
          setTimeout(() => {
            navigate('/');
          }, 2000);
        } catch (error) {
          console.error('Error responding to emergency request:', error);
          if (error.message && error.message.includes('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i cho matching n√†y')) {
            message.error('Y√™u c·∫ßu ƒë√£ c≈© ho·∫∑c kh√¥ng c√≤n hi·ªáu l·ª±c. Vui l√≤ng ki·ªÉm tra l·∫°i.');
          } else if (error.message && error.message.includes('Kh√¥ng t√¨m th·∫•y matching cho donor n√†y')) {
            message.error('B·∫°n kh√¥ng c√≥ y√™u c·∫ßu ph√π h·ª£p ƒë·ªÉ ph·∫£n h·ªìi.');
          } else if (error.message && error.message.includes('403')) {
            message.error('B·∫°n vui l√≤ng ƒëƒÉng nh·∫≠p t√†i kho·∫£n tr∆∞·ªõc khi x√°c nh·∫≠n.');
          } else {
            message.error(`L·ªói khi ${action}: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
          }
        } finally {
          setResponding(false);
        }
      }
    });
  };

  if (loading) {
    return (
      <>
        <Header />
        <div className="container py-5 text-center">
          <div className="spinner-border text-danger mb-3" role="status"></div>
          <div>ƒêang t·∫£i th√¥ng tin y√™u c·∫ßu m√°u...</div>
        </div>
        <Footer />
      </>
    );
  }

  if (!request) {
    return (
      <>
        <Header />
        <div className="container py-5 text-center">
          <h2>Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu m√°u</h2>
          <p>Y√™u c·∫ßu m√°u n√†y c√≥ th·ªÉ ƒë√£ b·ªã x√≥a ho·∫∑c kh√¥ng t·ªìn t·∫°i.</p>
          <button className="btn btn-primary" onClick={() => navigate('/')}>V·ªÅ trang ch·ªß</button>
        </div>
        <Footer />
      </>
    );
  }

  return (
    <>
      <Header />
      <div className="container py-4">
        <div className="row justify-content-center">
          <div className="col-lg-8 col-md-10">
            <div className="card shadow-lg emergency-card">
              <div className="card-header bg-danger text-white d-flex align-items-center">
                <span className="me-2" style={{fontSize:'1.5rem'}}>üö®</span>
                <span className="fw-bold">Y√™u c·∫ßu hi·∫øn m√°u kh·∫©n c·∫•p</span>
              </div>
              <div className="card-body">
                <div className="mb-3">
                  <h5 className="card-title text-danger mb-2">Th√¥ng tin chi ti·∫øt</h5>
                  <div className="row g-3">
                    <div className="col-md-6">
                      <div><b>M√£ y√™u c·∫ßu:</b> #{request.requestId}</div>
                      <div><b>C∆° s·ªü y t·∫ø:</b> {request.facilityName}</div>
                      <div><b>Nh√≥m m√°u c·∫ßn:</b> {request.bloodGroup}</div>
                      <div><b>S·ªë l∆∞·ª£ng c·∫ßn:</b> {request.quantityRequested} ml</div>
                      <div><b>Ng√†y c·∫ßn:</b> {request.requiredBy}</div>
                    </div>
                    <div className="col-md-6">
                      <div><b>Ng∆∞·ªùi li√™n h·ªá:</b> {request.contactPerson}</div>
                      <div><b>S·ªë ƒëi·ªán tho·∫°i:</b> {request.contactPhone}</div>
                      <div><b>Ghi ch√∫:</b> {request.notes || <span className="text-muted">Kh√¥ng c√≥</span>}</div>
                    </div>
                  </div>
                </div>
                <hr/>
                <div className="mb-3">
                  <h5 className="card-title text-success mb-2">B·∫°n c√≥ th·ªÉ h·ªó tr·ª£?</h5>
                  <div className="mb-2">Vui l√≤ng xem x√©t k·ªπ th√¥ng tin v√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh ph√π h·ª£p.</div>
                  <div className="response-radio-group">
                    {/* N√∫t X√°c nh·∫≠n */}
                    <div
                      className={`response-radio${selectedResponse === true ? ' selected-accept' : ''}${selectedResponse === false ? ' dim' : ''}`}
                      onClick={() => setSelectedResponse(true)}
                    >
                      <div className="radio-icon">
                        {selectedResponse === true && (
                          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="white" strokeWidth="3">
                            <polyline points="20,6 9,17 4,12"></polyline>
                          </svg>
                        )}
                      </div>
                      <span>X√°c nh·∫≠n h·ªó tr·ª£</span>
                    </div>
                    {/* N√∫t T·ª´ ch·ªëi */}
                    <div
                      className={`response-radio${selectedResponse === false ? ' selected-decline' : ''}${selectedResponse === true ? ' dim' : ''}`}
                      onClick={() => setSelectedResponse(false)}
                    >
                      <div className="radio-icon">
                        {selectedResponse === false && (
                          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="white" strokeWidth="3">
                            <path d="M18 6L6 18M6 6l12 12"></path>
                          </svg>
                        )}
                      </div>
                      <span>T·ª´ ch·ªëi</span>
                    </div>
                  </div>
                  <div className="d-flex justify-content-center">
                    <button
                      className="btn btn-primary btn-lg px-5 response-submit-btn"
                      disabled={selectedResponse === null || responding}
                      onClick={() => handleResponse(selectedResponse)}
                    >
                      G·ª≠i ph·∫£n h·ªìi
                    </button>
                  </div>
                </div>
                <div className="alert alert-warning mt-4 mb-0">
                  <b>L∆∞u √Ω:</b> ƒê√¢y l√† y√™u c·∫ßu hi·∫øn m√°u kh·∫©n c·∫•p, m·ªçi s·ª± h·ªó tr·ª£ c·ªßa b·∫°n ƒë·ªÅu r·∫•t qu√Ω gi√°.
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <Footer />
    </>
  );
} 