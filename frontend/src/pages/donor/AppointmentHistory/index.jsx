import React, { useState, useEffect } from "react";
import Header from "../../../components/user/Header";
import Footer from "../../../components/user/Footer";
import { Typography, Button, Spin, Modal } from "antd";
import { Link } from "react-router-dom";
import { EnvironmentOutlined, ClockCircleOutlined, FileTextOutlined } from "@ant-design/icons";
import "./index.css";
import { donorAPI } from '../../../services/api';
import moment from "moment";

const { Title, Text } = Typography;

export default function AppointmentHistory() {
  const [appointments, setAppointments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [bookingData, setBookingData] = useState(null);
  const [donationFormData, setDonationFormData] = useState(null);

  useEffect(() => {
    setLoading(true);
    Promise.all([
      donorAPI.getDonationHistory()
    ])
      .then(([history]) => {
        setAppointments(history || []);
      })
      .catch(() => {
        setAppointments([]);
      })
      .finally(() => setLoading(false));
    // L·∫•y d·ªØ li·ªáu localStorage gi·ªëng RegisterDonatePage
    const booking = localStorage.getItem('bookingFormData');
    if (booking) setBookingData(JSON.parse(booking));
    const donationForm = localStorage.getItem('donationFormData');
    if (donationForm) setDonationFormData(JSON.parse(donationForm));
  }, []);

  const handleDelete = async (registerId) => {
    Modal.confirm({
      title: 'X√°c nh·∫≠n h·ªßy l·ªãch',
      content: 'B·∫°n c√≥ mu·ªën h·ªßy l·ªãch n√†y kh√¥ng?',
      okText: 'X√°c nh·∫≠n',
      cancelText: 'H·ªßy',
      okButtonProps: { style: { backgroundColor: '#10b981', borderColor: '#10b981' } },
      onOk: async () => {
        try {
          await donorAPI.deleteDonationRegister(registerId);
          // Sau khi x√≥a th√†nh c√¥ng, g·ªçi l·∫°i API ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch
          const data = await donorAPI.getDonationHistory();
          setAppointments(data || []);
          // X√≥a d·ªØ li·ªáu localStorage li√™n quan
          localStorage.removeItem('bookingFormData');
          localStorage.removeItem('donationFormData');
          localStorage.removeItem('healthCheckAnswers');
          const email = localStorage.getItem('email');
          if (email) localStorage.removeItem('appointmentHistory_' + email);
        } catch {
          // N·∫øu l·ªói th√¨ kh√¥ng l√†m g√¨
        }
      }
    });
  };

  const renderDate = (date) => {
    // N·∫øu date null, undefined, r·ªóng ho·∫∑c moment(date) kh√¥ng h·ª£p l·ªá th√¨ tr·∫£ v·ªÅ "-"
    if (!date || !moment(date).isValid()) return "-";
    return moment(date).format("DD/MM/YYYY");
  };
  // L·∫•y ng√†y h·∫πn hi·∫øn m√°u ∆∞u ti√™n gi·ªëng RegisterDonatePage
  const getAppointmentDate = (app) => {
    return (
      app?.sendDate ||
      app?.appointment_date ||
      donationFormData?.appointment_date ||
      bookingData?.appointment_date ||
      donationFormData?.sendDate ||
      bookingData?.sendDate ||
      app?.appointmentDate ||
      app?.date ||
      '-'
    );
  };
  // L·∫•y khung gi·ªù hi·∫øn m√°u ∆∞u ti√™n gi·ªëng RegisterDonatePage
  const getTimeSlot = (app) => {
    return (
      app?.donationTimeSlot ||
      app?.timeSlot ||
      donationFormData?.donationTimeSlot ||
      bookingData?.donationTimeSlot ||
      donationFormData?.timeSlot ||
      bookingData?.timeSlot ||
      app?.appointmentTime ||
      '-'
    );
  };

  if (loading) {
    return (
      <div className="history-page-container">
        <Header />
        <div className="history-content">
          <div style={{ textAlign: 'center', padding: '50px' }}>
            <Spin size="large" />
            <div style={{ marginTop: '20px' }}>ƒêang t·∫£i l·ªãch s·ª≠ ƒë·∫∑t h·∫πn...</div>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <div className="history-page-container">
      <Header />
      <div className="history-content">
        <Title level={2} className="history-title">
          L·ªãch s·ª≠ ƒë·∫∑t h·∫πn
        </Title>

        <div className="appointment-list">
          {appointments.length > 0 ? (
            appointments.map((app) => (
              <div key={app.registerId || app.id} className="appointment-card">
                <div className="card-left">
                  <div className="blood-drop-icon">ü©∏</div>
                  <Text strong>Hi·∫øn m√°u</Text>
                </div>
                <div className="card-main">
                  <Text className="location-title" style={{fontWeight: 'normal', fontSize: 18}}>
                    {'466 Nguy·ªÖn Th·ªã Minh Khai Ph∆∞·ªùng 02, Qu·∫≠n 3, Tp H·ªì Ch√≠ Minh'}
                  </Text>
                  <Text className="appointment-details">
                    Ng√†y h·∫πn: {renderDate(getAppointmentDate(app))}
                  </Text>
                  <Text className="appointment-details">
                    Khung gi·ªù: {getTimeSlot(app)}
                  </Text>
                </div>
                <div className="card-right">
                  {app.status === 'cancelled' ? (
                    <Button className="status-btn red-btn" disabled>
                      ƒê√£ x√≥a
                    </Button>
                  ) : (
                    <Button className="status-btn yellow-btn" onClick={() => handleDelete(app.registerId || app.id)}>
                      H·ªßy l·ªãch
                    </Button>
                  )}
                  <Link to={`/appointment/${app.registerId || app.id}`} className="details-link">
                    <FileTextOutlined /> Xem chi ti·∫øt
                  </Link>
                </div>
              </div>
            ))
          ) : (
            <Text className="no-history-text">B·∫°n ch∆∞a c√≥ l·ªãch h·∫πn n√†o.</Text>
          )}
        </div>
      </div>
      <Footer />
    </div>
  );
}