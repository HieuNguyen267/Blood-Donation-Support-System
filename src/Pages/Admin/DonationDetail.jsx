import React, { useState } from "react";
import './DonationDetail.css';
import Header from "../../Component/Admin/Header";
import Sidebar from "../../Component/Admin/Sidebar";
import { useParams } from 'react-router-dom';

const fallbackDonations = [
  { code: "A001", name: "Nguy·ªÖn Duy Hi·∫øu", donateDate: "11/4/2024, 09:30", completeDate: "11/4/2024, 10:30", amount: "120 ml", status: "X√°c nh·∫≠n", blood: "Rh NULL" },
  { code: "A002", name: "L·ªØ Ph∆∞·ªõc Nh·∫≠t T√∫", donateDate: "15/4/2024, 08:30", completeDate: "15/4/2024, 09:30", amount: "120 ml", status: "Ch·ªù x√°c nh·∫≠n", blood: "O-" },
  { code: "A003", name: "Nguy·ªÖn Gia Tri·ªáu", donateDate: "4/11/2025, 15:35", completeDate: "4/11/2025, 16:35", amount: "120 ml", status: "X√°c nh·∫≠n", blood: "O+" },
  { code: "A004", name: "ƒê·∫≠u Nguy·ªÖn B·∫£o Tu·∫•n", donateDate: "27/5/2025, 10:30", completeDate: "27/5/2025, 11:30", amount: "120 ml", status: "X√°c nh·∫≠n", blood: "AB+" },
  { code: "A005", name: "Nguy·ªÖn Anh Khoa", donateDate: "27/5/2025, 10:45", completeDate: "27/5/2025, 11:45", amount: "120 ml", status: "X√°c nh·∫≠n", blood: "AB-" },
  { code: "A006", name: "ƒêo√†n Nguy·ªÖn Th√†nh H√≤a", donateDate: "15/4/2024, 08:30", completeDate: "15/4/2024, 09:30", amount: "120 ml", status: "T·ª´ ch·ªëi", blood: "A+" },
  { code: "A007", name: "Nguy·ªÖn Tri Th√¥ng", donateDate: "15/4/2024, 08:30", completeDate: "15/4/2024, 09:30", amount: "120 ml", status: "X√°c nh·∫≠n", blood: "B-" },
  { code: "A008", name: "Nguy·ªÖn VƒÉn ·ªö", donateDate: "15/4/2024, 08:30", completeDate: "15/4/2024, 09:30", amount: "120 ml", status: "T·ª´ ch·ªëi", blood: "A-" },
  { code: "A009", name: "Nguy·ªÖn C√¥ng Chi·∫øn", donateDate: "27/5/2025, 10:45", completeDate: "27/5/2025, 11:45", amount: "120 ml", status: "Ch·ªù x√°c nh·∫≠n", blood: "B+" },
];

export default function DonationDetail() {
  const { id } = useParams();
  // L·∫•y danh s√°ch ƒë∆°n hi·∫øn t·ª´ localStorage n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng fallback
  let donations = fallbackDonations;
  try {
    const local = localStorage.getItem('donations');
    if (local) donations = JSON.parse(local);
  } catch {}
  const donation = donations.find(d => d.code === id) || fallbackDonations[0];

  const [showEdit, setShowEdit] = useState(false);
  const [editData, setEditData] = useState(donation);
  const [toast, setToast] = useState({ show: false, type: '', message: '' });
  const [currentDonation, setCurrentDonation] = useState(donation);
  // Khi id thay ƒë·ªïi, c·∫≠p nh·∫≠t editData v√† currentDonation
  React.useEffect(() => { setEditData(donation); setCurrentDonation(donation); }, [id]);

  // Validate d·ªØ li·ªáu
  const validate = () => {
    if (!editData.name || !editData.donateDate || !editData.completeDate || !editData.amount || !editData.blood) {
      setToast({ show: true, type: 'error', message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!' });
      return false;
    }
    if (isNaN(parseInt(editData.amount)) || parseInt(editData.amount) <= 0) {
      setToast({ show: true, type: 'error', message: 'S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë d∆∞∆°ng!' });
      return false;
    }
    return true;
  };

  // H√†m l∆∞u ch·ªânh s·ª≠a
  const handleSaveEdit = () => {
    if (!validate()) return;
    let donations = fallbackDonations;
    try {
      const local = localStorage.getItem('donations');
      if (local) donations = JSON.parse(local);
    } catch {}
    const idx = donations.findIndex(d => d.code === id);
    if (idx !== -1) {
      donations[idx] = { ...donations[idx], ...editData };
      localStorage.setItem('donations', JSON.stringify(donations));
      setCurrentDonation(donations[idx]);
      setToast({ show: true, type: 'success', message: 'L∆∞u th√†nh c√¥ng!' });
      setShowEdit(false);
    } else {
      setToast({ show: true, type: 'error', message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n hi·∫øn!' });
    }
  };

  // X√°c nh·∫≠n ƒë∆°n
  const handleConfirm = () => {
    updateStatus('X√°c nh·∫≠n');
  };
  // T·ª´ ch·ªëi ƒë∆°n
  const handleReject = () => {
    updateStatus('T·ª´ ch·ªëi');
  };
  // H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i
  const updateStatus = (newStatus) => {
    let donations = fallbackDonations;
    try {
      const local = localStorage.getItem('donations');
      if (local) donations = JSON.parse(local);
    } catch {}
    const idx = donations.findIndex(d => d.code === id);
    if (idx !== -1) {
      donations[idx] = { ...donations[idx], status: newStatus };
      localStorage.setItem('donations', JSON.stringify(donations));
      setCurrentDonation(donations[idx]);
      setToast({ show: true, type: 'success', message: `ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i: ${newStatus}` });
    }
  };

  // ·∫®n toast sau 2.5s
  React.useEffect(() => {
    if (toast.show) {
      const t = setTimeout(() => setToast({ ...toast, show: false }), 2500);
      return () => clearTimeout(t);
    }
  }, [toast]);

  return (
    <div className="dashboard-root">
      <Header />
      <div className="dashboard-main">
        <Sidebar />
        <main className="donation-detail-root">
          <h2 className="donation-detail-title">Chi ti·∫øt ƒë∆°n hi·∫øn</h2>
          <div className="donation-detail-content">
            <div className="donation-detail-table">
              <div className="donation-detail-section-title">Th√¥ng tin chung</div>
              <table>
                <tbody>
                  <tr><td>H·ªç v√† t√™n :</td><td>{currentDonation.name}</td></tr>
                  <tr><td>Ng√†y v√† gi·ªù hi·∫øn :</td><td>{currentDonation.donateDate}</td></tr>
                  <tr><td>Ng√†y v√† gi·ªù ho√†n th√†nh :</td><td>{currentDonation.completeDate}</td></tr>
                  <tr><td>S·ªë l∆∞·ª£ng (ml) :</td><td>{currentDonation.amount}</td></tr>
                  <tr><td>Tr·∫°ng th√°i :</td><td>{currentDonation.status}</td></tr>
                  <tr><td>Nh√≥m m√°u :</td><td>{currentDonation.blood}</td></tr>
                </tbody>
              </table>
              <button className="btn-edit-info" style={{marginTop: 24, width: '100%'}} onClick={()=>setShowEdit(true)}>‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin</button>
            </div>
            <div className="donation-detail-statusbox">
              <div className="donation-detail-status-title">Tr·∫°ng th√°i :
                <span className={`donation-detail-status-label ${currentDonation.status === 'Ch·ªù x√°c nh·∫≠n' ? 'waiting' : currentDonation.status === 'X√°c nh·∫≠n' ? 'confirmed' : 'rejected'}`}>
                  <span className="dot"/> {currentDonation.status}
                </span>
              </div>
              {/* Ch·ªâ hi·ªán n√∫t khi tr·∫°ng th√°i l√† Ch·ªù x√°c nh·∫≠n */}
              {currentDonation.status === 'Ch·ªù x√°c nh·∫≠n' && (
                <div className="donation-detail-status-actions">
                  <button className="btn-cancel" onClick={handleReject}>‚úñ H·ªßy ƒë∆°n</button>
                  <button className="btn-confirm" onClick={handleConfirm}>‚úî X√°c nh·∫≠n</button>
                </div>
              )}
              <div className="donation-detail-status-history">
                <div className="donation-detail-status-history-title">L·ªãch s·ª≠ tr·∫°ng th√°i</div>
                <div className="donation-detail-status-history-item">
                  <span className="clock">üïí</span> 15:25 23.04.2024
                </div>
                <div className="donation-detail-status-history-desc">{currentDonation.status}</div>
              </div>
            </div>
          </div>
        </main>
      </div>
      {/* Modal ch·ªânh s·ª≠a th√¥ng tin */}
      {showEdit && (
        <div className="modal fade show" style={{display:'block',background:'rgba(0,0,0,0.3)'}} tabIndex="-1">
          <div className="modal-dialog modal-lg modal-dialog-centered">
            <div className="modal-content">
              <div className="modal-header" style={{background:'#8fd19e'}}>
                <h5 className="modal-title">Ch·ªânh s·ª≠a th√¥ng tin ƒë∆°n hi·∫øn</h5>
                <button type="button" className="btn-close" onClick={()=>setShowEdit(false)}></button>
              </div>
              <div className="modal-body">
                <div className="row g-3">
                  <div className="col-md-6">
                    <input className="form-control" placeholder="H·ªç v√† t√™n*" value={editData.name} onChange={e=>setEditData({...editData,name:e.target.value})} />
                  </div>
                  <div className="col-md-6">
                    <input className="form-control" placeholder="Ng√†y v√† gi·ªù hi·∫øn*" value={editData.donateDate} onChange={e=>setEditData({...editData,donateDate:e.target.value})} />
                  </div>
                  <div className="col-md-6">
                    <input className="form-control" placeholder="Ng√†y v√† gi·ªù ho√†n th√†nh*" value={editData.completeDate} onChange={e=>setEditData({...editData,completeDate:e.target.value})} />
                  </div>
                  <div className="col-md-6">
                    <input className="form-control" placeholder="S·ªë l∆∞·ª£ng (ml)*" value={editData.amount} onChange={e=>setEditData({...editData,amount:e.target.value})} />
                  </div>
                  <div className="col-md-6">
                    <select className="form-control" value={editData.status} onChange={e=>setEditData({...editData,status:e.target.value})}>
                      <option>X√°c nh·∫≠n</option>
                      <option>Ch·ªù x√°c nh·∫≠n</option>
                      <option>T·ª´ ch·ªëi</option>
                    </select>
                  </div>
                  <div className="col-md-6">
                    <input className="form-control" placeholder="Nh√≥m m√°u*" value={editData.blood} onChange={e=>setEditData({...editData,blood:e.target.value})} />
                  </div>
                </div>
              </div>
              <div className="modal-footer">
                <button className="btn btn-success" onClick={handleSaveEdit}>L∆∞u</button>
                <button className="btn btn-danger" onClick={()=>setShowEdit(false)}>H·ªßy</button>
              </div>
            </div>
          </div>
        </div>
      )}
      {/* Toast th√¥ng b√°o */}
      {toast.show && (
        <div className={`custom-toast ${toast.type}`}>{toast.message}</div>
      )}
    </div>
  );
} 